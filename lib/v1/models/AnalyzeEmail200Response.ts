/* tslint:disable */
/* eslint-disable */
/**
 * Opportify Insights API
 * ## Overview  The **Opportify Insights API** provides access to a powerful and up-to-date platform. With advanced data warehousing and AI-driven capabilities, this API is designed to empower your business to make informed, data-driven decisions and effectively assess potential risks.  ### Base URL Use the following base URL for all API requests:  ```plaintext https://api.opportify.ai/insights/v1/<service>/<endpoint> ```  ### Features - [**Email Insights:**](/docs/api-reference/email-insights)   - Validate email syntax.   - Identify email types (free, disposable, corporate or unknown).   - Real time verifications:     - Reachable: Confirms if the email domain has valid MX DNS records using DNS lookup.     - Deliverable: Simulates an SMTP handshake to check if the email address exists and is deliverable.     - Catch-All: Detects if the domain accepts all emails (catch-all configuration).   - Intelligent Error Correction: Automatically corrects well-known misspelled email addresses.   - Risk Report: Provides an AI-driven normalized score (200-1000) to evaluate email risk, using predefined thresholds.      [Access Documentation >>](/docs/api-reference/email-insights)  - [**IP Insights:**](/docs/api-reference/ip-insights)   - Connection types: Detects connection types such as `wired`, `mobile`, `enterprise`, `satellite`, `VPN`, `cloud-provider`, `open-proxy`, or `Tor`.   - Geo location: Delivers detailed insights such as country, city, timezone, language preferences, and additional location-based information to enhance regional understanding.   - WHOIS: Provides main details including RIR, ASN, organization, and abuse/admin/technical contacts.   - Trusted Provider Recognition: Identifies if the IP is part of a known trusted provider (e.g., ZTNA - Zero Trust Network Access).   - Blocklist Reports: Retrieves up-to-date blocklist statuses, active reports, and the latest detections.   - Risk Report: Delivers an AI-driven normalized score (200-1000) to evaluate IP risk, supported by predefined thresholds.    [Access Documentation >>](/docs/api-reference/ip-insights)  ### Authentication & Security - **API Key:** Access to the API requires an API key, which must be included in the request headers. Businesses can generate unlimited API keys directly from their account, offering flexibility and ease of use.  - **ACL Rules:** Enhance security with Access Control Lists (ACL), allowing you to restrict API access from specific IP addresses or ranges. This feature provides an additional layer of protection by ensuring only authorized IPs can interact with the API. - **No Query Parameters:** As a precautionary measure, our API avoids the use of query parameters for all operations, including authentication and handling Personally Identifiable Information (PII). This approach minimizes security risks by preventing sensitive data from being exposed in access logs, browser history, cached URLs, debugging tools, or inadvertently shared URLs. All sensitive information is securely transmitted through headers or the request body. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EmailDNS } from './EmailDNS';
import {
    EmailDNSFromJSON,
    EmailDNSFromJSONTyped,
    EmailDNSToJSON,
    EmailDNSToJSONTyped,
} from './EmailDNS';
import type { RiskReport } from './RiskReport';
import {
    RiskReportFromJSON,
    RiskReportFromJSONTyped,
    RiskReportToJSON,
    RiskReportToJSONTyped,
} from './RiskReport';

/**
 * 
 * @export
 * @interface AnalyzeEmail200Response
 */
export interface AnalyzeEmail200Response {
    /**
     * The validated email address.
     * @type {string}
     * @memberof AnalyzeEmail200Response
     */
    emailAddress: string;
    /**
     * The email provider or domain name.
     * @type {string}
     * @memberof AnalyzeEmail200Response
     */
    emailProvider: string;
    /**
     * Type of email address (e.g., free, disposable, corporate, unknown).
     * @type {string}
     * @memberof AnalyzeEmail200Response
     */
    emailType: string;
    /**
     * Indicates if the email address has a valid format.
     * @type {boolean}
     * @memberof AnalyzeEmail200Response
     */
    isFormatValid: boolean;
    /**
     * Suggested corrected email address, if applicable.
     * @type {string}
     * @memberof AnalyzeEmail200Response
     */
    emailCorrection: string;
    /**
     * Checks if the email address exists and is deliverable using SMTP handshake simulation. This involves connecting to the mail server and issuing commands to verify deliverability.
     * 
     * @type {boolean}
     * @memberof AnalyzeEmail200Response
     */
    isDeliverable: boolean;
    /**
     * Determines if the email domain is configured as a catch-all, which accepts emails for all addresses within the domain. This is verified through multiple email tests.
     * 
     * @type {boolean}
     * @memberof AnalyzeEmail200Response
     */
    isCatchAll: boolean;
    /**
     * Confirms if the email domain has valid MX DNS records using DNS lookup.
     * @type {boolean}
     * @memberof AnalyzeEmail200Response
     */
    isReachable: boolean;
    /**
     * 
     * @type {EmailDNS}
     * @memberof AnalyzeEmail200Response
     */
    emailDNS: EmailDNS;
    /**
     * 
     * @type {RiskReport}
     * @memberof AnalyzeEmail200Response
     */
    riskReport: RiskReport;
}

/**
 * Check if a given object implements the AnalyzeEmail200Response interface.
 */
export function instanceOfAnalyzeEmail200Response(value: object): value is AnalyzeEmail200Response {
    if (!('emailAddress' in value) || value['emailAddress'] === undefined) return false;
    if (!('emailProvider' in value) || value['emailProvider'] === undefined) return false;
    if (!('emailType' in value) || value['emailType'] === undefined) return false;
    if (!('isFormatValid' in value) || value['isFormatValid'] === undefined) return false;
    if (!('emailCorrection' in value) || value['emailCorrection'] === undefined) return false;
    if (!('isDeliverable' in value) || value['isDeliverable'] === undefined) return false;
    if (!('isCatchAll' in value) || value['isCatchAll'] === undefined) return false;
    if (!('isReachable' in value) || value['isReachable'] === undefined) return false;
    if (!('emailDNS' in value) || value['emailDNS'] === undefined) return false;
    if (!('riskReport' in value) || value['riskReport'] === undefined) return false;
    return true;
}

export function AnalyzeEmail200ResponseFromJSON(json: any): AnalyzeEmail200Response {
    return AnalyzeEmail200ResponseFromJSONTyped(json, false);
}

export function AnalyzeEmail200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AnalyzeEmail200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'emailAddress': json['emailAddress'],
        'emailProvider': json['emailProvider'],
        'emailType': json['emailType'],
        'isFormatValid': json['isFormatValid'],
        'emailCorrection': json['emailCorrection'],
        'isDeliverable': json['isDeliverable'],
        'isCatchAll': json['isCatchAll'],
        'isReachable': json['isReachable'],
        'emailDNS': EmailDNSFromJSON(json['emailDNS']),
        'riskReport': RiskReportFromJSON(json['riskReport']),
    };
}

export function AnalyzeEmail200ResponseToJSON(json: any): AnalyzeEmail200Response {
    return AnalyzeEmail200ResponseToJSONTyped(json, false);
}

export function AnalyzeEmail200ResponseToJSONTyped(value?: AnalyzeEmail200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'emailAddress': value['emailAddress'],
        'emailProvider': value['emailProvider'],
        'emailType': value['emailType'],
        'isFormatValid': value['isFormatValid'],
        'emailCorrection': value['emailCorrection'],
        'isDeliverable': value['isDeliverable'],
        'isCatchAll': value['isCatchAll'],
        'isReachable': value['isReachable'],
        'emailDNS': EmailDNSToJSON(value['emailDNS']),
        'riskReport': RiskReportToJSON(value['riskReport']),
    };
}

